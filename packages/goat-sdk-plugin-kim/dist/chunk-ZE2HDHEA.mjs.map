{"version":3,"sources":["../src/parameters.ts"],"sourcesContent":["import { createToolParameters } from \"@goat-sdk/core\";\nimport { z } from \"zod\";\n\nexport class GetSwapRouterAddressParams extends createToolParameters(z.object({})) {}\n\nexport const pathSchema = z.object({\n    tokenIn: z.string().describe(\"Address of the first token in the path\"),\n    tokenOut: z.string().describe(\"Address of the last token in the path\"),\n    intermediateTokens: z.array(z.string()).describe(\"Addresses of the intermediate tokens in the path\"),\n    fees: z.array(z.number()).describe(\"Fee tiers between each hop\"),\n});\n\nexport class ExactInputParams extends createToolParameters(\n    z.object({\n        path: pathSchema.describe(\"The path of the swap\"),\n        recipient: z.string().describe(\"Address to receive the output tokens\"),\n        deadline: z.number().describe(\"The deadline for the swap\"),\n        amountIn: z.string().describe(\"The amount of tokens to swap in\"),\n        amountOutMinimum: z.string().describe(\"The minimum amount of tokens to receive\"),\n    }),\n) {}\n\nexport class ExactOutputParams extends createToolParameters(\n    z.object({\n        path: z.any().describe(\"The path of the swap\"),\n        recipient: z.string().describe(\"The address to receive the output tokens\"),\n        deadline: z.number().describe(\"The deadline for the swap\"),\n        amountOut: z.string().describe(\"The amount of tokens to swap out\"),\n        amountInMaximum: z.string().describe(\"The maximum amount of tokens to swap in\"),\n    }),\n) {}\n\nexport class ExactInputSingleParams extends createToolParameters(\n    z.object({\n        tokenIn: z.string().describe(\"The address of the token to swap in\"),\n        tokenOut: z.string().describe(\"The address of the token to swap out\"),\n        recipient: z.string().describe(\"The address to receive the output tokens\"),\n        deadline: z\n            .number()\n            .optional()\n            .default(60 * 60 * 24)\n            .describe(\"The deadline for the swap in seconds from now\"),\n        amountIn: z.string().describe(\"The amount of tokens to swap in in base units\"),\n        amountOutMinimum: z.string().describe(\"The minimum amount of tokens to receive in base units\"),\n        limitSqrtPrice: z.string().describe(\"The limit price for the swap\"),\n    }),\n) {}\n\nexport class ExactOutputSingleParams extends createToolParameters(\n    z.object({\n        tokenIn: z.string().describe(\"The token to swap in\"),\n        tokenOut: z.string().describe(\"The token to swap out\"),\n        recipient: z.string().describe(\"The address to receive the output tokens\"),\n        deadline: z.number().describe(\"The deadline for the swap\"),\n        amountOut: z.string().describe(\"The amount of tokens to swap out\"),\n        amountInMaximum: z.string().describe(\"The maximum amount of tokens to swap in\"),\n        limitSqrtPrice: z.string().describe(\"The limit price for the swap\"),\n    }),\n) {}\n\nexport class DefaultConfigurationForPoolParams extends createToolParameters(\n    z.object({\n        poolAddress: z.string().describe(\"The address of the pool\"),\n    }),\n) {}\n\nexport class PoolByPairParams extends createToolParameters(\n    z.object({\n        token0: z.string().describe(\"The first token in the pair\"),\n        token1: z.string().describe(\"The second token in the pair\"),\n    }),\n) {}\n\nexport class MintParams extends createToolParameters(\n    z.object({\n        token0: z.string().describe(\"The first token in the pair\"),\n        token1: z.string().describe(\"The second token in the pair\"),\n        tickLower: z.number().describe(\"The lower tick for the liquidity\"),\n        tickUpper: z.number().describe(\"The upper tick for the liquidity\"),\n        amount0Desired: z.string().describe(\"The amount of token0 to add\"),\n        amount1Desired: z.string().describe(\"The amount of token1 to add\"),\n        amount0Min: z.string().describe(\"The minimum amount of token0 to add\"),\n        amount1Min: z.string().describe(\"The minimum amount of token1 to add\"),\n        recipient: z.string().describe(\"The address to receive the output tokens\"),\n        deadline: z.number().describe(\"The deadline for the swap\"),\n    }),\n) {}\n\nexport class IncreaseLiquidityParams extends createToolParameters(\n    z.object({\n        token0: z.string().describe(\"The first token in the pair\"),\n        token1: z.string().describe(\"The second token in the pair\"),\n        tokenId: z.string().describe(\"The token id of the liquidity\"),\n        amount0Desired: z.string().describe(\"The amount of token0 to add\"),\n        amount1Desired: z.string().describe(\"The amount of token1 to add\"),\n        amount0Min: z.string().describe(\"The minimum amount of token0 to add\"),\n        amount1Min: z.string().describe(\"The minimum amount of token1 to add\"),\n        deadline: z.number().describe(\"The deadline for the swap\"),\n    }),\n) {}\n\nexport class DecreaseLiquidityParams extends createToolParameters(\n    z.object({\n        token0: z.string().describe(\"The first token in the pair\"),\n        token1: z.string().describe(\"The second token in the pair\"),\n        tokenId: z.string().describe(\"The token id of the liquidity\"),\n        liquidity: z.string().describe(\"The amount of liquidity to remove\"),\n        amount0Min: z.string().describe(\"The minimum amount of token0 to remove\"),\n        amount1Min: z.string().describe(\"The minimum amount of token1 to remove\"),\n        deadline: z.number().describe(\"The deadline for the swap\"),\n    }),\n) {}\n\nexport class CollectParams extends createToolParameters(\n    z.object({\n        tokenId: z.string().describe(\"The token id of the liquidity\"),\n        token0: z.string().describe(\"The first token in the pair\"),\n        token1: z.string().describe(\"The second token in the pair\"),\n        recipient: z.string().describe(\"The address to receive the output tokens\"),\n        amount0Max: z.string().describe(\"The maximum amount of token0 to collect\"),\n        amount1Max: z.string().describe(\"The maximum amount of token1 to collect\"),\n    }),\n) {}\n\nexport class BurnParams extends createToolParameters(\n    z.object({\n        tokenId: z.string().describe(\"The token id of the liquidity position to be burned\"),\n    }),\n) {}\n\nexport class GlobalStateResponseParams extends createToolParameters(\n    z.object({\n        price: z.string().describe(\"The current price of the pool\"),\n        tick: z.number().describe(\"The current tick of the pool\"),\n        lastFee: z.number().describe(\"The current (last known) fee in hundredths of a bip\"),\n        pluginCongig: z.number().describe(\"The current plugin config as bitmap\"),\n        communityFee: z\n            .number()\n            .describe(\"The community fee represented as a percent of all collected fee in thousandths\"),\n        unlocked: z.boolean().describe(\"Whether the pool is unlocked\"),\n    }),\n) {}\n"],"mappings":"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","names":["createToolParameters","z","GetSwapRouterAddressParams","createToolParameters","z","object","pathSchema","tokenIn","string","describe","tokenOut","intermediateTokens","array","fees","number","ExactInputParams","path","recipient","deadline","amountIn","amountOutMinimum","ExactOutputParams","any","amountOut","amountInMaximum","ExactInputSingleParams","optional","default","limitSqrtPrice","ExactOutputSingleParams","DefaultConfigurationForPoolParams","poolAddress","PoolByPairParams","token0","token1","MintParams","tickLower","tickUpper","amount0Desired","amount1Desired","amount0Min","amount1Min","IncreaseLiquidityParams","tokenId","DecreaseLiquidityParams","liquidity","CollectParams","amount0Max","amount1Max","BurnParams","GlobalStateResponseParams","price","tick","lastFee","pluginCongig","communityFee","unlocked","boolean"]}