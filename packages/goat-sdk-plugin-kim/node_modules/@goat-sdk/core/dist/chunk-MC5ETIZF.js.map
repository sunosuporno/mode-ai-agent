{"version":3,"sources":["/Users/supornosarkar/Hackathons/mode-ai-agent-hackathon/goat/typescript/packages/core/dist/chunk-MC5ETIZF.js","../src/classes/PluginBase.ts","../src/decorators/Tool.ts"],"names":["PluginBase","constructor","name","toolProviders","getTools","walletClient","tools","toolProvider","toolsMap","Reflect","getMetadata","toolMetadataKey","constructorName","console","warn","tool","values","push","createTool","description","parameters","schema","params","args","index","target","apply","Symbol","Tool","propertyKey","descriptor","validateMethodParameters","existingTools","Map","set","value","snakeCase","defineMetadata","className","Object","undefined","logPrefix","isParametersParameter","explainer","isWalletClientParameter","parametersParameter","walletClientParameter","WalletClientBase"],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;ACLO,IAAeA,WAAAA,EAAf,MAAeA;ADOtB,ECfA,OAQsBA;ADQtB,IAAI,qCAAM,IAAK,EAAE,YAAY,CAAC;AAC9B,EAAE;AACF,EAAE;AACF,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,ECXIC,WAAAA,CACoBC,IAAAA,EAEAC,aAAAA,EAClB;ADQN,IAAI,IAAI,CCXgBD,KAAAA,EAAAA,IAAAA;ADYxB,IAAI,IAAI,CCVgBC,cAAAA,EAAAA,aAAAA;ADWxB,ECVO;ADWP;AACA;AACA;AACA;AACA;AACA,ECFIC,QAAAA,CAASC,YAAAA,EAA+D;AACpE,IAAA,MAAMC,MAAAA,EAAoB,CAAA,CAAA;AAE1B,IAAA,IAAA,CAAA,MAAWC,aAAAA,GAAgB,IAAA,CAAKJ,aAAAA,EAAe;AAC3C,MAAA,MAAMK,SAAAA,EAAWC,OAAAA,CAAQC,WAAAA,CAAYC,eAAAA,EAAiBJ,YAAAA,CAAaN,WAAW,CAAA;AAI9E,MAAA,GAAA,CAAI,CAACO,QAAAA,EAAU;AACX,QAAA,MAAMI,gBAAAA,EAAkBL,YAAAA,CAAaN,WAAAA,CAAYC,IAAAA;AACjD,QAAA,GAAA,CAAIU,gBAAAA,IAAoB,UAAA,EAAY;AAChCC,UAAAA,OAAAA,CAAQC,IAAAA,CACJ,yIAAA,CAAA;ADFxB,QCIgB,EAAA,KAAO;AACHD,UAAAA,OAAAA,CAAQC,IAAAA,CACJ,CAAA,mBAAA,EAAsBF,eAAAA,CAAAA,wEAAAA,CAAyF,CAAA;ADJvI,QCMgB;AACA,QAAA,QAAA;ADLhB,MCMY;AAEA,MAAA,IAAA,CAAA,MAAWG,KAAAA,GAAQP,QAAAA,CAASQ,MAAAA,CAAM,CAAA,EAAI;AAClCV,QAAAA,KAAAA,CAAMW,IAAAA,CACFC,yCAAAA;ADPpB,UCS4BhB,IAAAA,EAAMa,IAAAA,CAAKb,IAAAA;ADRvC,UCS4BiB,WAAAA,EAAaJ,IAAAA,CAAKI,WAAAA;ADR9C,UCS4BC,UAAAA,EAAYL,IAAAA,CAAKK,UAAAA,CAAWC;ADRxD,QCSwB,CAAA,EACA,CAACC,MAAAA,EAAAA,GAAAA;AACG,UAAA,MAAMC,KAAAA,EAAO,CAAA,CAAA;AACb,UAAA,GAAA,CAAIR,IAAAA,CAAKV,YAAAA,EAAc;AACnBkB,YAAAA,IAAAA,CAAKR,IAAAA,CAAKV,YAAAA,CAAamB,KAAK,EAAA,EAAInB,YAAAA;ADThE,UCU4B;AACAkB,UAAAA,IAAAA,CAAKR,IAAAA,CAAKK,UAAAA,CAAWI,KAAK,EAAA,EAAIF,MAAAA;AAE9B,UAAA,OAAOP,IAAAA,CAAKU,MAAAA,CAAOC,KAAAA,CAAMnB,YAAAA,EAAcgB,IAAAA,CAAAA;ADVnE,QCWwB,CAAA,CAAA,CAAA;ADVxB,MCaY;ADZZ,ICaQ;AAEA,IAAA,OAAOjB,KAAAA;ADbf,ECcI;AACJ,CAAA;ADbA;AACA;AE9DA,4BAAO;AAgCA,IAAMK,gBAAAA,EAAkBgB,MAAAA,CAAO,WAAA,CAAA;AAiB/B,SAASC,IAAAA,CAAKN,MAAAA,EAA2B;AAE5C,EAAA,OAAO,CAACG,MAAAA,EAAgBI,WAAAA,EAAqBC,UAAAA,EAAAA,GAAAA;AACzC,IAAA,MAAM,EAAEV,UAAAA,EAAYf,aAAY,EAAA,EAAK0B,wBAAAA,CAAyBN,MAAAA,EAAQI,WAAAA,CAAAA;AAEtE,IAAA,MAAMG,cAAAA,EACFvB,OAAAA,CAAQC,WAAAA,CAAYC,eAAAA,EAAiBc,MAAAA,CAAOxB,WAAW,EAAA,mBAAK,IAAIgC,GAAAA,CAAAA,CAAAA;AAEpED,IAAAA,aAAAA,CAAcE,GAAAA,CAAIL,WAAAA,EAAa;AFavC,MEZYJ,MAAAA,EAAQK,UAAAA,CAAWK,KAAAA;AFa/B,MEZYjC,IAAAA,mBAAMoB,MAAAA,CAAOpB,IAAAA,UAAQkC,wCAAAA,WAAUP,GAAAA;AFa3C,MEZYV,WAAAA,EAAaG,MAAAA,CAAOH,WAAAA;AFahC,MEZYC,UAAAA;AFaZ,MEZY,GAAIf,aAAAA,EAAe;AFa/B,QEbiCA;AFcjC,MEd8C,EAAA,EAAI,CAAC;AFenD,IEdQ,CAAA,CAAA;AAEAI,IAAAA,OAAAA,CAAQ4B,cAAAA,CAAe1B,eAAAA,EAAiBqB,aAAAA,EAAeP,MAAAA,CAAOxB,WAAW,CAAA;AACzE,IAAA,OAAOwB,MAAAA;AFcf,EEbI,CAAA;AACJ;AAnBgBG,qCAAAA,IAAAA,EAAAA,MAAAA,CAAAA;AAqBhB,SAASG,wBAAAA,CAELN,MAAAA,EACAI,WAAAA,EAAmB;AAUnB,EAAA,MAAMS,UAAAA,EAAYb,OAAAA,WAAkBc,OAAAA,EAASd,MAAAA,CAAOxB,WAAAA,CAAYC,KAAAA,EAAOsC,KAAAA,CAAAA;AACvE,EAAA,MAAMC,UAAAA,EAAY,CAAA,QAAA,EAAWZ,WAAAA,CAAAA,CAAAA,EAAeS,UAAAA,EAAY,CAAA,WAAA,EAAcA,SAAAA,CAAAA,CAAAA,EAAAA,EAAe,EAAA,CAAA,CAAA;AAEjF,EAAA;AAEsET,EAAAA;AAE5C,EAAA;AACkC,IAAA;AAChE,EAAA;AACmC,EAAA;AAC+B,IAAA;AAClE,EAAA;AACiC,EAAA;AACyD,IAAA;AAC1F,EAAA;AAEkDa,EAAAA;AACjB,EAAA;AAEtBD,IAAAA;AFH2E;AEG1BE,IAAAA;AFD0B;AECwD,mEAAA;AAE9I,EAAA;AAEoDC,EAAAA;AAE7C,EAAA;AACS,IAAA;AACwBC,MAAAA;AACkBxB,MAAAA;AACtD,IAAA;AAEM,IAAA;AAAgB,MAAA;AAAkCyB,QAAAA;AAAiC,MAAA;AAClF,IAAA;AACX,EAAA;AACJ;AAhDSf;AAmDkC;AACP,EAAA;AACrB,IAAA;AACX,EAAA;AACgC,EAAA;AACrB,IAAA;AACX,EAAA;AACkCgB,EAAAA;AACtC;AARSH;AAWgC;AACU,EAAA;AACnD;AAFSF;AFCiF;AACA;AACA;AACA;AACA;AACA","file":"/Users/supornosarkar/Hackathons/mode-ai-agent-hackathon/goat/typescript/packages/core/dist/chunk-MC5ETIZF.js","sourcesContent":[null,"import { type StoredToolMetadataMap, toolMetadataKey } from \"../decorators/Tool\";\nimport type { Chain } from \"../types/Chain\";\nimport { type ToolBase, createTool } from \"./ToolBase\";\nimport type { WalletClientBase } from \"./WalletClientBase\";\n\n/**\n * Abstract base class for plugins that provide tools for wallet interactions.\n */\nexport abstract class PluginBase<TWalletClient extends WalletClientBase = WalletClientBase> {\n    /**\n     * Creates a new Plugin instance.\n     * @param name - The name of the plugin\n     * @param toolProviders - Array of class instances that provide tools\n     */\n    constructor(\n        public readonly name: string,\n        // biome-ignore lint/complexity/noBannedTypes: Object is the correct type, referring to instances of classes\n        public readonly toolProviders: Object[],\n    ) {}\n\n    /**\n     * Checks if the plugin supports a specific blockchain.\n     * @param chain - The blockchain to check support for\n     * @returns True if the chain is supported, false otherwise\n     */\n    abstract supportsChain(chain: Chain): boolean;\n\n    /**\n     * Retrieves the tools provided by the plugin.\n     * @param wallet - The wallet client to use for tool execution\n     * @returns An array of tools\n     */\n    getTools(walletClient: TWalletClient): ToolBase[] | Promise<ToolBase[]> {\n        const tools: ToolBase[] = [];\n\n        for (const toolProvider of this.toolProviders) {\n            const toolsMap = Reflect.getMetadata(toolMetadataKey, toolProvider.constructor) as\n                | StoredToolMetadataMap\n                | undefined;\n\n            if (!toolsMap) {\n                const constructorName = toolProvider.constructor.name;\n                if (constructorName === \"Function\") {\n                    console.warn(\n                        \"Detected a non-instance tool provider. Please ensure you're passing instances of your tool providers, by using `new MyToolProvider(..)`\",\n                    );\n                } else {\n                    console.warn(\n                        `No tools found for ${constructorName}. Please ensure you're using the '@Tool' decorator to expose your tools.`,\n                    );\n                }\n                continue;\n            }\n\n            for (const tool of toolsMap.values()) {\n                tools.push(\n                    createTool(\n                        {\n                            name: tool.name,\n                            description: tool.description,\n                            parameters: tool.parameters.schema,\n                        },\n                        (params) => {\n                            const args = [];\n                            if (tool.walletClient) {\n                                args[tool.walletClient.index] = walletClient;\n                            }\n                            args[tool.parameters.index] = params;\n\n                            return tool.target.apply(toolProvider, args);\n                        },\n                    ),\n                );\n            }\n        }\n\n        return tools;\n    }\n}\n","import type { z } from \"zod\";\nimport { WalletClientBase } from \"../classes\";\nimport { snakeCase } from \"../utils/snakeCase\";\n\nimport \"reflect-metadata\";\n\n/**\n * Parameters for the Tool decorator\n * @template TParameters - The Zod schema type for the tool parameters\n */\nexport type ToolDecoratorParams = {\n    /**\n     * The name of the tool\n     * @default snakeCase(methodName)\n     */\n    name?: string;\n    /** A description of what the tool does */\n    description: string;\n};\n\nexport type StoredToolMetadata = {\n    name: string;\n    description: string;\n    parameters: {\n        index: number;\n        schema: z.ZodSchema;\n    };\n    walletClient?: {\n        index: number;\n    };\n    // biome-ignore lint/complexity/noBannedTypes: Function is the correct type for a descriptor value\n    target: Function;\n};\n\nexport type StoredToolMetadataMap = Map<string, StoredToolMetadata>;\n\nexport const toolMetadataKey = Symbol(\"goat:tool\");\n\n/**\n * Decorator that marks a class method as a tool accessible to the LLM\n * @param params - Configuration parameters for the tool\n * @returns A decorator function that can be applied to class methods\n *\n * @example\n * class MyToolService {\n *     \\@Tool({\n *         description: \"Adds two numbers\",\n *     })\n *     add({a, b}: AddParameters) {\n *         return a + b;\n *     }\n *}\n */\nexport function Tool(params: ToolDecoratorParams) {\n    // biome-ignore lint/complexity/noBannedTypes: Object is the correct type for a class method\n    return (target: Object, propertyKey: string, descriptor: PropertyDescriptor) => {\n        const { parameters, walletClient } = validateMethodParameters(target, propertyKey);\n\n        const existingTools: StoredToolMetadataMap =\n            Reflect.getMetadata(toolMetadataKey, target.constructor) || new Map();\n\n        existingTools.set(propertyKey, {\n            target: descriptor.value,\n            name: params.name ?? snakeCase(propertyKey),\n            description: params.description,\n            parameters: parameters,\n            ...(walletClient ? { walletClient } : {}),\n        });\n\n        Reflect.defineMetadata(toolMetadataKey, existingTools, target.constructor);\n        return target;\n    };\n}\n\nfunction validateMethodParameters(\n    // biome-ignore lint/complexity/noBannedTypes: Object is the correct type for a class method\n    target: Object,\n    propertyKey: string,\n): {\n    parameters: {\n        index: number;\n        schema: z.ZodSchema;\n    };\n    walletClient?: {\n        index: number;\n    };\n} {\n    const className = target instanceof Object ? target.constructor.name : undefined;\n    const logPrefix = `Method '${propertyKey}'${className ? ` on class '${className}'` : \"\"}`;\n    const explainer =\n        \"Tool methods must have at least one parameter that is a Zod schema class created with the createToolParameters function.\";\n\n    const methodParameters = Reflect.getMetadata(\"design:paramtypes\", target, propertyKey);\n\n    if (methodParameters == null) {\n        throw new Error(`Failed to get parameters for ${logPrefix}.`);\n    }\n    if (methodParameters.length === 0) {\n        throw new Error(`${logPrefix} has no parameters. ${explainer}`);\n    }\n    if (methodParameters.length > 2) {\n        throw new Error(`${logPrefix} has ${methodParameters.length} parameters. ${explainer}`);\n    }\n\n    const parametersParameter = methodParameters.find(isParametersParameter);\n    if (parametersParameter == null) {\n        throw new Error(\n            `${logPrefix} has no parameters parameter.\\n\\n1.) ${explainer}\\n\\n2.) Ensure that you are not using 'import type' for the parameters.`,\n        );\n    }\n\n    const walletClientParameter = methodParameters.find(isWalletClientParameter);\n\n    return {\n        parameters: {\n            index: methodParameters.indexOf(parametersParameter) as number,\n            schema: parametersParameter.prototype.constructor.schema,\n        },\n        ...(walletClientParameter\n            ? { walletClient: { index: methodParameters.indexOf(walletClientParameter) as number } }\n            : {}),\n    };\n}\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nfunction isWalletClientParameter(param: any) {\n    if (!param || !param.prototype) {\n        return false;\n    }\n    if (param === WalletClientBase) {\n        return true;\n    }\n    return param.prototype instanceof WalletClientBase;\n}\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nfunction isParametersParameter(param: any) {\n    return param.prototype?.constructor?.schema != null;\n}\n"]}