import {
  snakeCase
} from "./chunk-USJAFXPA.mjs";
import {
  WalletClientBase
} from "./chunk-S4E3EJMS.mjs";
import {
  createTool
} from "./chunk-MGBJXP6Y.mjs";
import {
  __name
} from "./chunk-PAWJFY3S.mjs";

// src/classes/PluginBase.ts
var PluginBase = class {
  static {
    __name(this, "PluginBase");
  }
  name;
  toolProviders;
  /**
   * Creates a new Plugin instance.
   * @param name - The name of the plugin
   * @param toolProviders - Array of class instances that provide tools
   */
  constructor(name, toolProviders) {
    this.name = name;
    this.toolProviders = toolProviders;
  }
  /**
   * Retrieves the tools provided by the plugin.
   * @param wallet - The wallet client to use for tool execution
   * @returns An array of tools
   */
  getTools(walletClient) {
    const tools = [];
    for (const toolProvider of this.toolProviders) {
      const toolsMap = Reflect.getMetadata(toolMetadataKey, toolProvider.constructor);
      if (!toolsMap) {
        const constructorName = toolProvider.constructor.name;
        if (constructorName === "Function") {
          console.warn("Detected a non-instance tool provider. Please ensure you're passing instances of your tool providers, by using `new MyToolProvider(..)`");
        } else {
          console.warn(`No tools found for ${constructorName}. Please ensure you're using the '@Tool' decorator to expose your tools.`);
        }
        continue;
      }
      for (const tool of toolsMap.values()) {
        tools.push(createTool({
          name: tool.name,
          description: tool.description,
          parameters: tool.parameters.schema
        }, (params) => {
          const args = [];
          if (tool.walletClient) {
            args[tool.walletClient.index] = walletClient;
          }
          args[tool.parameters.index] = params;
          return tool.target.apply(toolProvider, args);
        }));
      }
    }
    return tools;
  }
};

// src/decorators/Tool.ts
import "reflect-metadata";
var toolMetadataKey = Symbol("goat:tool");
function Tool(params) {
  return (target, propertyKey, descriptor) => {
    const { parameters, walletClient } = validateMethodParameters(target, propertyKey);
    const existingTools = Reflect.getMetadata(toolMetadataKey, target.constructor) || /* @__PURE__ */ new Map();
    existingTools.set(propertyKey, {
      target: descriptor.value,
      name: params.name ?? snakeCase(propertyKey),
      description: params.description,
      parameters,
      ...walletClient ? {
        walletClient
      } : {}
    });
    Reflect.defineMetadata(toolMetadataKey, existingTools, target.constructor);
    return target;
  };
}
__name(Tool, "Tool");
function validateMethodParameters(target, propertyKey) {
  const className = target instanceof Object ? target.constructor.name : void 0;
  const logPrefix = `Method '${propertyKey}'${className ? ` on class '${className}'` : ""}`;
  const explainer = "Tool methods must have at least one parameter that is a Zod schema class created with the createToolParameters function.";
  const methodParameters = Reflect.getMetadata("design:paramtypes", target, propertyKey);
  if (methodParameters == null) {
    throw new Error(`Failed to get parameters for ${logPrefix}.`);
  }
  if (methodParameters.length === 0) {
    throw new Error(`${logPrefix} has no parameters. ${explainer}`);
  }
  if (methodParameters.length > 2) {
    throw new Error(`${logPrefix} has ${methodParameters.length} parameters. ${explainer}`);
  }
  const parametersParameter = methodParameters.find(isParametersParameter);
  if (parametersParameter == null) {
    throw new Error(`${logPrefix} has no parameters parameter.

1.) ${explainer}

2.) Ensure that you are not using 'import type' for the parameters.`);
  }
  const walletClientParameter = methodParameters.find(isWalletClientParameter);
  return {
    parameters: {
      index: methodParameters.indexOf(parametersParameter),
      schema: parametersParameter.prototype.constructor.schema
    },
    ...walletClientParameter ? {
      walletClient: {
        index: methodParameters.indexOf(walletClientParameter)
      }
    } : {}
  };
}
__name(validateMethodParameters, "validateMethodParameters");
function isWalletClientParameter(param) {
  if (!param || !param.prototype) {
    return false;
  }
  if (param === WalletClientBase) {
    return true;
  }
  return param.prototype instanceof WalletClientBase;
}
__name(isWalletClientParameter, "isWalletClientParameter");
function isParametersParameter(param) {
  return param.prototype?.constructor?.schema != null;
}
__name(isParametersParameter, "isParametersParameter");

export {
  toolMetadataKey,
  Tool,
  PluginBase
};
//# sourceMappingURL=chunk-IRAEC7YC.mjs.map