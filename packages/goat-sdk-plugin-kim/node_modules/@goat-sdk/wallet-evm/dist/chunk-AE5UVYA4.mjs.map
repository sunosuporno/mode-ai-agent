{"version":3,"sources":["../src/sendETH.plugin.ts"],"sourcesContent":["import { Chain, PluginBase, createTool } from \"@goat-sdk/core\";\nimport { parseEther } from \"viem\";\nimport * as allEVMChains from \"viem/chains\";\nimport { z } from \"zod\";\nimport { EVMWalletClient } from \"./EVMWalletClient\";\n\nexport class SendETHPlugin extends PluginBase<EVMWalletClient> {\n    constructor() {\n        super(\"sendETH\", []);\n    }\n\n    supportsChain = (chain: Chain) => chain.type === \"evm\";\n\n    getTools(walletClient: EVMWalletClient) {\n        const sendTool = createTool(\n            {\n                name: `send_${getChainToken(walletClient.getChain().id).symbol}`,\n                description: `Send ${getChainToken(walletClient.getChain().id).symbol} to an address.`,\n                parameters: sendETHParametersSchema,\n            },\n            (parameters: z.infer<typeof sendETHParametersSchema>) => sendETHMethod(walletClient, parameters),\n        );\n        return [sendTool];\n    }\n}\n\nexport const sendETH = () => new SendETHPlugin();\n\nconst sendETHParametersSchema = z.object({\n    to: z.string().describe(\"The address to send ETH to\"),\n    amount: z.string().describe(\"The amount of ETH to send\"),\n});\n\nasync function sendETHMethod(\n    walletClient: EVMWalletClient,\n    parameters: z.infer<typeof sendETHParametersSchema>,\n): Promise<string> {\n    try {\n        const amount = parseEther(parameters.amount);\n        const tx = await walletClient.sendTransaction({\n            to: parameters.to,\n            value: amount,\n        });\n\n        return tx.hash;\n    } catch (error) {\n        throw new Error(`Failed to send ${getChainToken(walletClient.getChain().id)}: ${error}`);\n    }\n}\n\nfunction getChainToken(chainId: number) {\n    // Get all viem chains\n    const allChains = Object.values(allEVMChains);\n    // Find matching chain by ID\n    const viemChain = allChains.find((c) => c.id === chainId);\n\n    if (!viemChain) {\n        throw new Error(`Unsupported EVM chain ID: ${chainId}`);\n    }\n\n    return {\n        symbol: viemChain.nativeCurrency.symbol,\n        name: viemChain.nativeCurrency.name,\n        decimals: viemChain.nativeCurrency.decimals,\n    };\n}\n"],"mappings":";;;;;AAAA,SAAgBA,YAAYC,kBAAkB;AAC9C,SAASC,kBAAkB;AAC3B,YAAYC,kBAAkB;AAC9B,SAASC,SAAS;AAGX,IAAMC,gBAAN,cAA4BC,WAAAA;EANnC,OAMmCA;;;EAC/BC,cAAc;AACV,UAAM,WAAW,CAAA,CAAE;EACvB;EAEAC,gBAAgB,wBAACC,UAAiBA,MAAMC,SAAS,OAAjC;EAEhBC,SAASC,cAA+B;AACpC,UAAMC,WAAWC,WACb;MACIC,MAAM,QAAQC,cAAcJ,aAAaK,SAAQ,EAAGC,EAAE,EAAEC,MAAM;MAC9DC,aAAa,QAAQJ,cAAcJ,aAAaK,SAAQ,EAAGC,EAAE,EAAEC,MAAM;MACrEE,YAAYC;IAChB,GACA,CAACD,eAAwDE,cAAcX,cAAcS,UAAAA,CAAAA;AAEzF,WAAO;MAACR;;EACZ;AACJ;AAEO,IAAMW,UAAU,6BAAM,IAAInB,cAAAA,GAAV;AAEvB,IAAMiB,0BAA0BG,EAAEC,OAAO;EACrCC,IAAIF,EAAEG,OAAM,EAAGC,SAAS,4BAAA;EACxBC,QAAQL,EAAEG,OAAM,EAAGC,SAAS,2BAAA;AAChC,CAAA;AAEA,eAAeN,cACXX,cACAS,YAAmD;AAEnD,MAAI;AACA,UAAMS,SAASC,WAAWV,WAAWS,MAAM;AAC3C,UAAME,KAAK,MAAMpB,aAAaqB,gBAAgB;MAC1CN,IAAIN,WAAWM;MACfO,OAAOJ;IACX,CAAA;AAEA,WAAOE,GAAGG;EACd,SAASC,OAAO;AACZ,UAAM,IAAIC,MAAM,kBAAkBrB,cAAcJ,aAAaK,SAAQ,EAAGC,EAAE,CAAA,KAAMkB,KAAAA,EAAO;EAC3F;AACJ;AAfeb;AAiBf,SAASP,cAAcsB,SAAe;AAElC,QAAMC,YAAYC,OAAOC,OAAOC,YAAAA;AAEhC,QAAMC,YAAYJ,UAAUK,KAAK,CAACC,MAAMA,EAAE3B,OAAOoB,OAAAA;AAEjD,MAAI,CAACK,WAAW;AACZ,UAAM,IAAIN,MAAM,6BAA6BC,OAAAA,EAAS;EAC1D;AAEA,SAAO;IACHnB,QAAQwB,UAAUG,eAAe3B;IACjCJ,MAAM4B,UAAUG,eAAe/B;IAC/BgC,UAAUJ,UAAUG,eAAeC;EACvC;AACJ;AAfS/B;","names":["PluginBase","createTool","parseEther","allEVMChains","z","SendETHPlugin","PluginBase","constructor","supportsChain","chain","type","getTools","walletClient","sendTool","createTool","name","getChainToken","getChain","id","symbol","description","parameters","sendETHParametersSchema","sendETHMethod","sendETH","z","object","to","string","describe","amount","parseEther","tx","sendTransaction","value","hash","error","Error","chainId","allChains","Object","values","allEVMChains","viemChain","find","c","nativeCurrency","decimals"]}