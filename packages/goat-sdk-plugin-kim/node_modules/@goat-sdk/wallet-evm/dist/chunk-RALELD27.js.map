{"version":3,"sources":["/Users/supornosarkar/Hackathons/mode-ai-agent-hackathon/goat/typescript/packages/wallets/evm/dist/chunk-RALELD27.js","../src/sendETH.plugin.ts"],"names":["SendETHPlugin","PluginBase","constructor","supportsChain","chain","type","getTools","walletClient","sendTool","createTool","name","getChainToken","getChain","id","symbol","sendETHParametersSchema","parameters","to","amount","hash","sendETHMethod","allEVMChains","chainId","decimals"],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACA;ACJA,sCAA8C;AAC9C,4BAA2B;AAC3B,0FAA8B;AAC9B,0BAAkB;AAGX,IAAMA,cAAAA,YAAN,MAAA,QAA4BC,iBAAAA;ADInC,ECVA,OAMmCA;ADKnC,IAAI,qCAAM,IAAK,EAAE,eAAe,CAAC;AACjC,EAAE;AACF,ECNIC,WAAAA,CAAAA,EAAc;AACV,IAAA,KAAA,CAAM,SAAA,EAAW,CAAA,CAAE,qCAAA;ADO3B,ECNI;ADOJ,iBCLIC,cAAAA,kBAAgB,qCAAA,CAACC,KAAAA,EAAAA,GAAiBA,KAAAA,CAAMC,KAAAA,IAAS,KAAA,EAAjC,eAAA,EAAA;ADMpB,ECJIC,QAAAA,CAASC,YAAAA,EAA+B;AACpC,IAAA,MAAMC,SAAAA,EAAWC,8BAAAA;ADKzB,MCHgBC,IAAAA,EAAM,CAAA,KAAA,EAAQC,aAAAA,CAAcJ,YAAAA,CAAaK,QAAAA,CAAQ,CAAA,CAAGC,EAAE,CAAA,CAAEC,MAAM,CAAA,CAAA;AACCA,MAAAA;AACnDC,MAAAA;AAEqEC,IAAAA;AAElF,IAAA;AAACR,MAAAA;ADGqD,IAAA;ACFjE,EAAA;AACJ;AAEuB;AAEkB;AACb,EAAA;AACI,EAAA;AAChC;AAIuD;AAE/C,EAAA;AAC2C,IAAA;AACG,IAAA;AAC3BS,MAAAA;AACRC,MAAAA;AACX,IAAA;AAEUC,IAAAA;AACE,EAAA;AACiDP,IAAAA;AACjE,EAAA;AACJ;AAfeQ;AAiBuB;AAEFC,EAAAA;AAEiBC,EAAAA;AAEjC,EAAA;AAC0C,IAAA;AAC1D,EAAA;AAEO,EAAA;AAC8BR,IAAAA;AACFJ,IAAAA;AACIa,IAAAA;AACvC,EAAA;AACJ;AAfSZ;ADS4D;AACA;AACA;AACA;AACA","file":"/Users/supornosarkar/Hackathons/mode-ai-agent-hackathon/goat/typescript/packages/wallets/evm/dist/chunk-RALELD27.js","sourcesContent":[null,"import { Chain, PluginBase, createTool } from \"@goat-sdk/core\";\nimport { parseEther } from \"viem\";\nimport * as allEVMChains from \"viem/chains\";\nimport { z } from \"zod\";\nimport { EVMWalletClient } from \"./EVMWalletClient\";\n\nexport class SendETHPlugin extends PluginBase<EVMWalletClient> {\n    constructor() {\n        super(\"sendETH\", []);\n    }\n\n    supportsChain = (chain: Chain) => chain.type === \"evm\";\n\n    getTools(walletClient: EVMWalletClient) {\n        const sendTool = createTool(\n            {\n                name: `send_${getChainToken(walletClient.getChain().id).symbol}`,\n                description: `Send ${getChainToken(walletClient.getChain().id).symbol} to an address.`,\n                parameters: sendETHParametersSchema,\n            },\n            (parameters: z.infer<typeof sendETHParametersSchema>) => sendETHMethod(walletClient, parameters),\n        );\n        return [sendTool];\n    }\n}\n\nexport const sendETH = () => new SendETHPlugin();\n\nconst sendETHParametersSchema = z.object({\n    to: z.string().describe(\"The address to send ETH to\"),\n    amount: z.string().describe(\"The amount of ETH to send\"),\n});\n\nasync function sendETHMethod(\n    walletClient: EVMWalletClient,\n    parameters: z.infer<typeof sendETHParametersSchema>,\n): Promise<string> {\n    try {\n        const amount = parseEther(parameters.amount);\n        const tx = await walletClient.sendTransaction({\n            to: parameters.to,\n            value: amount,\n        });\n\n        return tx.hash;\n    } catch (error) {\n        throw new Error(`Failed to send ${getChainToken(walletClient.getChain().id)}: ${error}`);\n    }\n}\n\nfunction getChainToken(chainId: number) {\n    // Get all viem chains\n    const allChains = Object.values(allEVMChains);\n    // Find matching chain by ID\n    const viemChain = allChains.find((c) => c.id === chainId);\n\n    if (!viemChain) {\n        throw new Error(`Unsupported EVM chain ID: ${chainId}`);\n    }\n\n    return {\n        symbol: viemChain.nativeCurrency.symbol,\n        name: viemChain.nativeCurrency.name,\n        decimals: viemChain.nativeCurrency.decimals,\n    };\n}\n"]}