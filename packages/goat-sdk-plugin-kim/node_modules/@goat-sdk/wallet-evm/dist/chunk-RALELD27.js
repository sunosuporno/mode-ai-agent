"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } var _class;

var _chunk7QVYU63Ejs = require('./chunk-7QVYU63E.js');

// src/sendETH.plugin.ts
var _core = require('@goat-sdk/core');
var _viem = require('viem');
var _chains = require('viem/chains'); var allEVMChains = _interopRequireWildcard(_chains);
var _zod = require('zod');
var SendETHPlugin = (_class = class extends _core.PluginBase {
  static {
    _chunk7QVYU63Ejs.__name.call(void 0, this, "SendETHPlugin");
  }
  constructor() {
    super("sendETH", []);_class.prototype.__init.call(this);;
  }
  __init() {this.supportsChain = /* @__PURE__ */ _chunk7QVYU63Ejs.__name.call(void 0, (chain) => chain.type === "evm", "supportsChain")}
  getTools(walletClient) {
    const sendTool = _core.createTool.call(void 0, {
      name: `send_${getChainToken(walletClient.getChain().id).symbol}`,
      description: `Send ${getChainToken(walletClient.getChain().id).symbol} to an address.`,
      parameters: sendETHParametersSchema
    }, (parameters) => sendETHMethod(walletClient, parameters));
    return [
      sendTool
    ];
  }
}, _class);
var sendETH = /* @__PURE__ */ _chunk7QVYU63Ejs.__name.call(void 0, () => new SendETHPlugin(), "sendETH");
var sendETHParametersSchema = _zod.z.object({
  to: _zod.z.string().describe("The address to send ETH to"),
  amount: _zod.z.string().describe("The amount of ETH to send")
});
async function sendETHMethod(walletClient, parameters) {
  try {
    const amount = _viem.parseEther.call(void 0, parameters.amount);
    const tx = await walletClient.sendTransaction({
      to: parameters.to,
      value: amount
    });
    return tx.hash;
  } catch (error) {
    throw new Error(`Failed to send ${getChainToken(walletClient.getChain().id)}: ${error}`);
  }
}
_chunk7QVYU63Ejs.__name.call(void 0, sendETHMethod, "sendETHMethod");
function getChainToken(chainId) {
  const allChains = Object.values(allEVMChains);
  const viemChain = allChains.find((c) => c.id === chainId);
  if (!viemChain) {
    throw new Error(`Unsupported EVM chain ID: ${chainId}`);
  }
  return {
    symbol: viemChain.nativeCurrency.symbol,
    name: viemChain.nativeCurrency.name,
    decimals: viemChain.nativeCurrency.decimals
  };
}
_chunk7QVYU63Ejs.__name.call(void 0, getChainToken, "getChainToken");




exports.SendETHPlugin = SendETHPlugin; exports.sendETH = sendETH;
//# sourceMappingURL=chunk-RALELD27.js.map