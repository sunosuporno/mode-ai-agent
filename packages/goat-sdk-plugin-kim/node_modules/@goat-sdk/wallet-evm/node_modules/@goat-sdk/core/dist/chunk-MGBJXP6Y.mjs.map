{"version":3,"sources":["../src/classes/ToolBase.ts"],"sourcesContent":["import type { z } from \"zod\";\n\n/**\n * Configuration interface for creating a Tool\n * @template TParameters - The Zod schema type for the tool's parameters\n */\nexport type ToolConfig<TParameters extends z.ZodSchema = z.ZodSchema> = {\n    /** The name of the tool */\n    name: string;\n    /** A description of what the tool does */\n    description: string;\n    /** The Zod schema defining the tool's parameters */\n    parameters: TParameters;\n};\n\n/**\n * Abstract base class for creating tools with typed parameters and results\n * @template TParameters - The Zod schema type for the tool's parameters\n * @template TResult - The return type of the tool's execute method\n */\n// biome-ignore lint/suspicious/noExplicitAny: 'any' is the correct default type for any function\nexport abstract class ToolBase<TParameters extends z.ZodSchema = z.ZodSchema, TResult = any> {\n    /** The name of the tool */\n    public readonly name: string;\n    /** A description of what the tool does */\n    public readonly description: string;\n    /** The Zod schema defining the parameters, that will be passed to the tool's execute method */\n    public readonly parameters: TParameters;\n\n    /**\n     * Creates a new Tool instance\n     * @param config - The configuration object for the tool\n     */\n    constructor(config: ToolConfig<TParameters>) {\n        this.name = config.name;\n        this.description = config.description;\n        this.parameters = config.parameters;\n    }\n\n    /**\n     * Executes the tool with the provided parameters\n     * @param parameters - The parameters for the tool execution, validated against the tool's schema\n     * @returns The result of the tool execution\n     */\n    abstract execute(parameters: z.infer<TParameters>): TResult | Promise<TResult>;\n}\n\n/**\n * Creates a new Tool instance with the provided configuration and execution function\n * @template TParameters - The Zod schema type for the tool's parameters\n * @template TResult - The return type of the tool's execute method\n * @param config - The configuration object for the tool\n * @param execute - The function to be called when the tool is executed\n * @returns A new Tool instance\n */\n// biome-ignore lint/suspicious/noExplicitAny: 'any' is the correct default type for any function\nexport function createTool<TParameters extends z.ZodSchema, TResult = any>(\n    config: ToolConfig<TParameters>,\n    execute: (parameters: z.infer<TParameters>) => TResult | Promise<TResult>,\n) {\n    return new (class extends ToolBase<TParameters, TResult> {\n        execute(parameters: z.infer<TParameters>): TResult | Promise<TResult> {\n            return execute(parameters);\n        }\n    })(config);\n}\n"],"mappings":";;;;;AAqBO,IAAeA,WAAf,MAAeA;EANtB,OAMsBA;;;;EAEFC;;EAEAC;;EAEAC;;;;;EAMhBC,YAAYC,QAAiC;AACzC,SAAKJ,OAAOI,OAAOJ;AACnB,SAAKC,cAAcG,OAAOH;AAC1B,SAAKC,aAAaE,OAAOF;EAC7B;AAQJ;AAWO,SAASG,WACZD,QACAE,SAAyE;AAEzE,SAAO,IAAK,cAAcP,SAAAA;IACtBO,QAAQJ,YAA8D;AAClE,aAAOI,QAAQJ,UAAAA;IACnB;EACJ,EAAGE,MAAAA;AACP;AATgBC;","names":["ToolBase","name","description","parameters","constructor","config","createTool","execute"]}