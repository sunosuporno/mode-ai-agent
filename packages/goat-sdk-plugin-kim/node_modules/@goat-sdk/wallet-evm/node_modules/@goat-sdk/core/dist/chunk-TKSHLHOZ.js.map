{"version":3,"sources":["/Users/supornosarkar/Hackathons/mode-ai-agent-hackathon/goat/typescript/packages/core/dist/chunk-TKSHLHOZ.js","../src/utils/addParametersToDescription.ts"],"names":["addParametersToDescription","description","schema","paramLines","_def","typeName","shape","Object","entries","map","key","value","isOptional","paramDescription","typeStr","getTypeString"],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACA;ACFO,SAASA,0BAAAA,CAA2BC,WAAAA,EAAqBC,MAAAA,EAAoB;AAChF,EAAA,IAAIC,WAAAA,EAAuB,CAAA,CAAA;AAE3B,EAAA,GAAA,iBAAID,MAAAA,mBAAOE,IAAAA,6BAAMC,WAAAA,IAAa,WAAA,EAAa;AACvC,IAAA,MAAMC,MAAAA,EAAQJ,MAAAA,CAAOE,IAAAA,CAAKE,KAAAA,CAAK,CAAA;AAC/B,IAAA,GAAA,CAAIA,KAAAA,EAAO;AACPH,MAAAA,WAAAA,EAAaI,MAAAA,CAAOC,OAAAA,CAAsBF,KAAAA,CAAAA,CAAOG,GAAAA,CAAI,CAAC,CAACC,GAAAA,EAAKC,KAAAA,CAAAA,EAAAA,GAAM;AAC9D,QAAA,MAAMC,WAAAA,EAAaD,KAAAA,CAAMC,UAAAA,CAAU,CAAA;AACnC,QAAA,MAAMC,iBAAAA,EAAmBF,KAAAA,CAAMV,YAAAA,GAAe,EAAA;AAC9C,QAAA,MAAMa,QAAAA,EAAUC,aAAAA,CAAcJ,KAAAA,CAAAA;AAC9B,QAAA,OAAO,CAAA,EAAA,EAAKD,GAAAA,CAAAA,EAAAA;AAChB,MAAA;AACJ,IAAA;AACJ,EAAA;AAEUT,EAAAA;AAAgC;AAC9C;AAhBgBD;AAkBOE;AACFA,EAAAA;AAETG,EAAAA;AACC,IAAA;AACMU,MAAAA;AACN,IAAA;AACM,MAAA;AACN,IAAA;AACM,MAAA;AACN,IAAA;AACM,MAAA;AACN,IAAA;AACM,MAAA;AACN,IAAA;AACM,MAAA;AACX,IAAA;AACW,MAAA;AACf,EAAA;AACJ;AAnBSA;ADsBe;AACA;AACA;AACA","file":"/Users/supornosarkar/Hackathons/mode-ai-agent-hackathon/goat/typescript/packages/core/dist/chunk-TKSHLHOZ.js","sourcesContent":[null,"import type { z } from \"zod\";\n\nexport function addParametersToDescription(description: string, schema: z.ZodTypeAny): string {\n    let paramLines: string[] = [];\n\n    if (schema._def?.typeName === \"ZodObject\") {\n        const shape = schema._def.shape();\n        if (shape) {\n            paramLines = Object.entries<z.ZodTypeAny>(shape).map(([key, value]) => {\n                const isOptional = value.isOptional();\n                const paramDescription = value.description || \"\";\n                const typeStr = getTypeString(value);\n                return `- ${key}${isOptional ? \" (optional)\" : \"\"} (${typeStr}): ${paramDescription}`;\n            });\n        }\n    }\n\n    return `${description}\\n${paramLines.join(\"\\n\")}`;\n}\n\nfunction getTypeString(schema: z.ZodTypeAny): string {\n    const typeName = schema._def?.typeName;\n\n    switch (typeName) {\n        case \"ZodOptional\":\n            return getTypeString((schema as z.ZodOptional<z.ZodTypeAny>).unwrap());\n        case \"ZodString\":\n            return \"string\";\n        case \"ZodNumber\":\n            return \"number\";\n        case \"ZodBoolean\":\n            return \"boolean\";\n        case \"ZodArray\":\n            return \"array\";\n        case \"ZodObject\":\n            return \"object\";\n        default:\n            return \"unknown\";\n    }\n}\n"]}